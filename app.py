import streamlit as st
import json
import os
import requests
from app.utils.bitrix_api import load_connection_config, save_connection_config

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="JusGestante",
    page_icon="üë©‚Äç‚öñÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded",
)

# T√≠tulo principal
st.title("JusGestante - Painel de Gest√£o")

# Verificar se h√° configura√ß√£o de conex√£o
config = load_connection_config()

if not config:
    # Se n√£o houver configura√ß√£o, mostrar formul√°rio
    st.write("### Configura√ß√£o da Conex√£o com Bitrix24")
    st.write("Para usar este aplicativo, √© necess√°rio configurar a conex√£o com o Bitrix24.")
    
    # Adicionar sele√ß√£o de tipo de API
    api_type = st.radio(
        "Tipo de API",
        ["REST API (Recomendado)", "BI Connector"],
        index=0,
        help="Selecione o tipo de API para conectar ao Bitrix24."
    )
    
    # Converter sele√ß√£o para valor interno
    api_type_value = "rest" if api_type == "REST API (Recomendado)" else "biconnector"
    
    # Exibir informa√ß√µes espec√≠ficas baseadas no tipo de API
    if api_type_value == "rest":
        st.info("""
        A REST API √© a forma recomendada de conectar ao Bitrix24.
        Voc√™ precisa de um webhook token que pode ser criado em:
        
        **Configura√ß√µes** > **Aplicativos** > **Outros** > **Webhooks**
        """)
    else:
        st.info("""
        O BI Connector √© uma forma alternativa de conectar ao Bitrix24.
        Voc√™ precisa de um token do BI Connector que pode ser obtido em:
        
        **CRM** > **An√°lises** > **Conectores BI** > **Power BI**
        """)
    
    with st.form("setup_connection"):
        account_name = st.text_input("Nome da Conta Bitrix24", value="b24-lffzg9")
        
        # Label adequado ao tipo de API
        token_label = "Token do Webhook" if api_type_value == "rest" else "Token do BI Connector"
        
        # Usar valor padr√£o do secrets se dispon√≠vel
        default_token = ""
        try:
            if api_type_value == "rest" and "api" in st.secrets and "bitrix_webhook" in st.secrets["api"]:
                webhook_url = st.secrets["api"]["bitrix_webhook"]
                if webhook_url:
                    parts = webhook_url.split("/rest/")
                    if len(parts) == 2:
                        default_token = parts[1].rstrip("/")
        except:
            pass
            
        token = st.text_input(token_label, type="password", value=default_token)
        
        submitted = st.form_submit_button("Salvar Configura√ß√£o")
        
        if submitted:
            if account_name and token:
                if save_connection_config(account_name, token, api_type_value):
                    # Testar conex√£o antes de prosseguir
                    try:
                        test_url = ""
                        if api_type_value == "rest":
                            test_url = f"https://{account_name}.bitrix24.com.br/rest/{token}/profile"
                        else:
                            test_url = f"https://{account_name}.bitrix24.com.br/bitrix/tools/biconnector/pbi.php?token={token}&table=b_user"
                        
                        response = requests.get(test_url)
                        if response.status_code == 200:
                            st.success("Conex√£o testada com sucesso!")
                            st.success("Configura√ß√£o salva!")
                            st.rerun()
                        else:
                            st.error(f"Erro ao testar conex√£o (HTTP {response.status_code}). Verifique suas credenciais.")
                            st.error(response.text)
                    except Exception as e:
                        st.error(f"Erro ao testar conex√£o: {str(e)}")
                        st.warning("Configura√ß√£o salva, mas a conex√£o n√£o p√¥de ser testada.")
                        st.rerun()
            else:
                st.error("Preencha todos os campos para salvar a configura√ß√£o.")
else:
    # Descri√ß√£o do aplicativo
    st.write("""
    ## Bem-vindo ao painel de gest√£o JusGestante!
    
    Este painel permite visualizar e gerenciar informa√ß√µes do Bitrix24.
    Utilize as op√ß√µes do menu √† esquerda para navegar entre os relat√≥rios dispon√≠veis.
    """)
    
    # Mostrar informa√ß√µes da conex√£o
    api_type = config.get("api_type", "rest")
    api_type_label = "REST API" if api_type == "rest" else "BI Connector"
    
    st.sidebar.write(f"**Conta conectada:** {config['account_name']}")
    st.sidebar.write(f"**Tipo de API:** {api_type_label}")
    
    # Op√ß√£o para testar conex√£o
    if st.sidebar.button("Testar Conex√£o"):
        st.write("Testando conex√£o...")
        try:
            test_url = ""
            if api_type == "rest":
                # Usar token da configura√ß√£o
                token = config.get("token", "")
                test_url = f"https://{config['account_name']}.bitrix24.com.br/rest/{token}/profile"
            else:
                # Para BI Connector, usar o URL j√° configurado com token
                test_url = config["urls"]["crm_deal"].split("&table=")[0] + "&table=b_user"
                
            response = requests.get(test_url)
            if response.status_code == 200:
                st.success("Conex√£o testada com sucesso!")
            else:
                st.error(f"Erro ao testar conex√£o (HTTP {response.status_code}).")
                st.error(response.text)
        except Exception as e:
            st.error(f"Erro ao testar conex√£o: {str(e)}")
    
    # Op√ß√£o para limpar configura√ß√£o
    if st.sidebar.button("Limpar Configura√ß√£o"):
        if "bitrix_config" in st.session_state:
            del st.session_state.bitrix_config
        try:
            if os.path.exists("app/data/connection_config.json"):
                os.remove("app/data/connection_config.json")
        except:
            pass
        st.sidebar.success("Configura√ß√£o removida!")
        st.rerun()

    # Mostrar gr√°ficos ou estat√≠sticas gerais
    st.write("### Estat√≠sticas Gerais")
    
    # Aqui voc√™ pode adicionar widgets, gr√°ficos e dados
    # que ser√£o exibidos na p√°gina principal
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Total de Leads", "250", "+12%")
    
    with col2:
        st.metric("Processos Ativos", "145", "-5%")
    
    with col3:
        st.metric("Convers√£o", "58%", "+2%") 